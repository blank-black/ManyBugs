9c9
<  * Additions (c) Richard Nolde 2006-2010
---
>  * Additions (c) Richard Nolde 2006-2010 
11c11
<  * Permission to use, copy, modify, distribute, and sell this software and
---
>  * Permission to use, copy, modify, distribute, and sell this software and 
18c18
<  *
---
>  * 
110,111c110,111
< static   char tiffcrop_version_id[] = "2.3";
< static   char tiffcrop_rev_date[] = "07-12-2010";
---
> static   char tiffcrop_version_id[] = "2.4";
> static   char tiffcrop_rev_date[] = "12-13-2010";
136a137,140
> #ifdef NEED_LIBPORT
> # include "libport.h"
> #endif
> 
1478c1482
<                           "Data type %d is not supported, tag %d skipped.",
---
>                           "Data type %d is not supported, tag %d skipped",
1725c1729
<                         {
---
> 		        {
1731c1735
<                         {
---
> 			{
2068,2082c2072,2086
<  
<      /* MAX_EXPORT_PAGES limited to 6 digits to prevent string overflow of pathname */
<      if (findex > MAX_EXPORT_PAGES)
<        {
<        TIFFError("update_output_file", "Maximum of %d pages per file exceeded.\n", MAX_EXPORT_PAGES);
<        return 1;
<        }
<  
<     sprintf (filenum, "-%03d%s", findex, export_ext);
<     filenum[14] = '\0';
<     strncat (exportname, filenum, 15);
<     }
<   exportname[PATH_MAX - 1] = '\0';
<   
<   *tiffout = TIFFOpen(exportname, mode);
---
> 
>       /* MAX_EXPORT_PAGES limited to 6 digits to prevent string overflow of pathname */
>       if (findex > MAX_EXPORT_PAGES)
> 	{
> 	TIFFError("update_output_file", "Maximum of %d pages per file exceeded", MAX_EXPORT_PAGES);
>         return 1;
>         }
> 
>       sprintf (filenum, "-%03d%s", findex, export_ext);
>       filenum[14] = '\0';
>       strncat (exportname, filenum, 15);
>       }
>     exportname[PATH_MAX - 1] = '\0';
> 
>     *tiffout = TIFFOpen(exportname, mode);
2085c2089
<       TIFFError("update_output_file", "Unable to open output file %s\n", exportname);
---
>       TIFFError("update_output_file", "Unable to open output file %s", exportname);
2136c2140
<   memset (temp_filename, '\0', PATH_MAX + 1);              
---
> 
2226a2231,2233
>           /* dump.infilename is guaranteed to be NUL termimated and have 20 bytes 
>              fewer than PATH_MAX */ 
>           memset (temp_filename, '\0', PATH_MAX + 1);              
2242a2250,2252
>           /* dump.outfilename is guaranteed to be NUL termimated and have 20 bytes 
>              fewer than PATH_MAX */ 
>           memset (temp_filename, '\0', PATH_MAX + 1);              
2403c2413
<     TIFFError ("", "Invalid FILE pointer for dump file\n");
---
>     TIFFError ("", "Invalid FILE pointer for dump file");
2426c2436
<       TIFFError ("", "Unable to write binary data to dump file\n");
---
>       TIFFError ("", "Unable to write binary data to dump file");
2442c2452
<     TIFFError ("", "Invalid FILE pointer for dump file\n");
---
>     TIFFError ("", "Invalid FILE pointer for dump file");
2461c2471
<       TIFFError ("", "Unable to write binary data to dump file\n");
---
>       TIFFError ("", "Unable to write binary data to dump file");
2477c2487
<     TIFFError ("", "Invalid FILE pointer for dump file\n");
---
>     TIFFError ("", "Invalid FILE pointer for dump file");
2498c2508
<       TIFFError ("", "Unable to write binary data to dump file\n");
---
>       TIFFError ("", "Unable to write binary data to dump file");
2514c2524
<     TIFFError ("", "Invalid FILE pointer for dump file\n");
---
>     TIFFError ("", "Invalid FILE pointer for dump file");
2535c2545
<       TIFFError ("", "Unable to write binary data to dump file\n");
---
>       TIFFError ("", "Unable to write binary data to dump file");
2550c2560
<     TIFFError ("", "Invalid FILE pointer for dump file\n");
---
>     TIFFError ("", "Invalid FILE pointer for dump file");
2571c2581
<       TIFFError ("", "Unable to write binary data to dump file\n");
---
>       TIFFError ("", "Unable to write binary data to dump file");
2600c2610
<     TIFFError ("", "Invalid FILE pointer for dump file\n");
---
>     TIFFError ("", "Invalid FILE pointer for dump file");
5268,5269c5278,5279
<   int32  test2;
<   uint32 test, seg, total, need_buff = 0;
---
>   int32  test;
>   uint32 seg, total, need_buff = 0;
5356,5359c5366,5369
<            test = offsets.startx + 
<                   (uint32)(offsets.crop_width * 1.0 * seg / total);
<            if (test > image->width - 1)
<              crop->regionlist[i].x2 = image->width - 1;
---
>            test = (int32)offsets.startx + 
>                   (int32)(offsets.crop_width * 1.0 * seg / total);
>            if (test < 1 )
>              crop->regionlist[i].x2 = 0;
5361c5371,5376
<              crop->regionlist[i].x2 = test - 1;
---
> 	     {
> 	     if (test > (int32)(image->width - 1))
>                crop->regionlist[i].x2 = image->width - 1;
>              else
> 	       crop->regionlist[i].x2 = test - 1;
>              }
5376,5377c5391,5392
<            test2 = offsets.endy - (uint32)(offsets.crop_length * 1.0 * seg / total);
<            if (test2 < 1 )
---
>            test = offsets.endy - (uint32)(offsets.crop_length * 1.0 * seg / total);
>            if (test < 1 )
5380c5395
< 	     crop->regionlist[i].y1 = test2 + 1;
---
> 	     crop->regionlist[i].y1 = test + 1;
5382,5386c5397,5406
<            test = offsets.endy - (uint32)(offsets.crop_length * 1.0 * (seg - 1) / total);
<            if (test > (image->length - 1))
<              crop->regionlist[i].y2 = image->length - 1;
<            else 
<              crop->regionlist[i].y2 = test;
---
>            test = offsets.endy - (offsets.crop_length * 1.0 * (seg - 1) / total);
>            if (test < 1 )
>              crop->regionlist[i].y2 = 0;
>            else
> 	     {
>              if (test > (int32)(image->length - 1))
>                crop->regionlist[i].y2 = image->length - 1;
>              else 
>                crop->regionlist[i].y2 = test;
> 	     }
5404,5407c5424,5426
< 	          (uint32)(offsets.crop_width * (total - seg + 1) * 1.0 / total);
< 
<            if (test > image->width - 1)
<              crop->regionlist[i].x2 = image->width - 1;
---
> 	          (offsets.crop_width * (total - seg + 1) * 1.0 / total);
>            if (test < 1 )
>              crop->regionlist[i].x2 = 0;
5409c5428,5433
<              crop->regionlist[i].x2 = test - 1;
---
> 	     {
> 	     if (test > (int32)(image->width - 1))
>                crop->regionlist[i].x2 = image->width - 1;
>              else
>                crop->regionlist[i].x2 = test - 1;
>              }
5427,5428c5451,5452
< 	   if (test > image->length - 1)
< 	     crop->regionlist[i].y2 = image->length - 1;
---
>            if (test < 1 )
>              crop->regionlist[i].y2 = 0;
5430c5454,5459
< 	     crop->regionlist[i].y2 = test - 1;
---
> 	     {
> 	     if (test > (int32)(image->length - 1))
> 	       crop->regionlist[i].y2 = image->length - 1;
>              else
> 	       crop->regionlist[i].y2 = test - 1;
> 	     }
5532c5561
<                    "Hmargin: %3.2f, Vmargin: %3.2f\n",
---
>                    "Hmargin: %3.2f, Vmargin: %3.2f",
5535c5564
<     TIFFError("", "Res_unit: %d, Scale: %3.2f, Page width: %3.2f, length: %3.2f\n", 
---
>     TIFFError("", "Res_unit: %d, Scale: %3.2f, Page width: %3.2f, length: %3.2f", 
5951c5980
<   /* The clause up to the read statement are taken from Tom Lane's tiffcp patch */
---
>   /* The clause up to the read statement is taken from Tom Lane's tiffcp patch */
5961c5990
< 		"Can't copy/convert subsampled image with subsampling %d horiz %d vert.\n",
---
> 		"Can't copy/convert subsampled image with subsampling %d horiz %d vert",
5968d5996
< 
6517c6545
<       TIFFError ("", "DEBUG: Unable to allocate debugging bitarray\n");
---
>       TIFFError ("", "DEBUG: Unable to allocate debugging bitarray");
6554c6582
<         TIFFError ("", "Src offset: %8d, Dst offset: %8d\n", src_offset, dst_offset); 
---
>         TIFFError ("", "Src offset: %8d, Dst offset: %8d", src_offset, dst_offset); 
7036c7064
< 	   TIFFError("writeCroppedImage",
---
> 	   TIFFError("writeSingleSection",
