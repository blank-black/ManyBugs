52a53
> static ZEND_FUNCTION(trait_exists);
173a175,179
> ZEND_BEGIN_ARG_INFO_EX(arginfo_trait_exists, 0, 0, 1)
> 	ZEND_ARG_INFO(0, traitname)
> 	ZEND_ARG_INFO(0, autoload)
> ZEND_END_ARG_INFO()
> 
251a258
> 	ZEND_FE(trait_exists,		arginfo_trait_exists)
1226c1233
< 		RETURN_BOOL(found == SUCCESS && !((*ce)->ce_flags & ZEND_ACC_INTERFACE));
---
> 		RETURN_BOOL(found == SUCCESS && !((*ce)->ce_flags & (ZEND_ACC_INTERFACE | ZEND_ACC_TRAIT) > ZEND_ACC_EXPLICIT_ABSTRACT_CLASS));
1230c1237
<  		RETURN_BOOL(((*ce)->ce_flags & ZEND_ACC_INTERFACE) == 0);
---
>  		RETURN_BOOL(((*ce)->ce_flags & (ZEND_ACC_INTERFACE | (ZEND_ACC_TRAIT - ZEND_ACC_EXPLICIT_ABSTRACT_CLASS))) == 0);
1279a1287,1329
> /* {{{ proto bool trait_exists(string traitname [, bool autoload])
>  Checks if the trait exists */
> ZEND_FUNCTION(trait_exists)
> {
> 	char *trait_name, *lc_name;
> 	zend_class_entry **ce;
> 	int trait_name_len;
> 	int found;
> 	zend_bool autoload = 1;
> 	ALLOCA_FLAG(use_heap)
>   
> 	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s|b", &trait_name, &trait_name_len, &autoload) == FAILURE) {
> 		return;
> 	}
>   
> 	if (!autoload) {
> 		char *name;
> 		int len;
> 		
> 		lc_name = do_alloca(trait_name_len + 1, use_heap);
> 		zend_str_tolower_copy(lc_name, trait_name, trait_name_len);
>     
> 		/* Ignore leading "\" */
> 		name = lc_name;
> 		len = trait_name_len;
> 		if (lc_name[0] == '\\') {
> 			name = &lc_name[1];
> 			len--;
> 		}
>     
> 		found = zend_hash_find(EG(class_table), name, len+1, (void **) &ce);
> 		free_alloca(lc_name, use_heap);
> 		RETURN_BOOL(found == SUCCESS && (((*ce)->ce_flags & ZEND_ACC_TRAIT) > ZEND_ACC_EXPLICIT_ABSTRACT_CLASS));
> 	}
>   
>  	if (zend_lookup_class(trait_name, trait_name_len, &ce TSRMLS_CC) == SUCCESS) {
>  		RETURN_BOOL(((*ce)->ce_flags & ZEND_ACC_TRAIT) > ZEND_ACC_EXPLICIT_ABSTRACT_CLASS);
> 	} else {
> 		RETURN_FALSE;
> 	}
> }
> /* }}} */
> 
